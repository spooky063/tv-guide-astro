---
import Layout from '../layouts/Layout.astro';
import data from '../assets/programs.json';
import Channel from '../components/Channel.astro';
import type { ChannelProps } from '../tv/domain/Channel.ts';

const channels = data as unknown as ChannelProps[];
---

<Layout>
	<main class="container relative mx-auto scroll-my-12 overflow-auto p-2 print:p-12 md:p-16">
		<h1 class="text-3xl font-bold mb-6">Programme TV</h1>

		<div id="filters" class="flex gap-3 flex-wrap mb-4">
			<button class="bg-gray-100 text-gray-800 text-xs rounded-md py-1 px-2 border-gray-700" data-filter="Film">Film</button>
			<button class="bg-gray-100 text-gray-800 text-xs rounded-md py-1 px-2 border-gray-700" data-filter="Sport">Sport</button>
			<button class="bg-gray-100 text-gray-800 text-xs rounded-md py-1 px-2 border-gray-700" data-filter="Série">Série</button>
			<button class="bg-gray-100 text-gray-800 text-xs rounded-md py-1 px-2 border-gray-700" data-filter="Documentaire">Documentaire</button>
			<button class="bg-gray-100 text-gray-800 text-xs rounded-md py-1 px-2 border-gray-700" data-filter="Magazine">Magazine</button>
		</div>

		<div>
			{channels.map(channel => (
				<Channel channel={channel} />
			))}
		</div>

		<button popovertarget="dialogA">Open dialogA</button>
		<dialog id="dialogA" popover>
			<div class="fixed inset-0 bg-slate-950/50 flex justify-center items-center pointer-events-none transition-opacity duration-300 ease-out z-[9999]">
                <div class="bg-white rounded-xl shadow-2xl shadow-slate-950/5 border border-slate-200 w-[95%] scale-95">
                <div class="p-4 pb-2 flex justify-between items-center">
                    <h1 class="text-lg text-slate-800 font-semibold">Material Tailwind</h1>
                    <button popovertarget="dialogA" type="button" aria-label="Fermer" class="inline-grid place-items-center border align-middle select-none font-sans font-medium text-center transition-all duration-300 ease-in disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none data-[shape=circular]:rounded-full text-sm min-w-[34px] min-h-[34px] rounded-md bg-transparent border-transparent text-slate-200-foreground hover:bg-slate-200/10 hover:border-slate-200/10 shadow-none hover:shadow-none outline-none absolute right-2 top-2">
                    	<svg width="1.5em" height="1.5em" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" color="currentColor" class="h-5 w-5"><path d="M6.75827 17.2426L12.0009 12M17.2435 6.75736L12.0009 12M12.0009 12L6.75827 6.75736M12.0009 12L17.2435 17.2426" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg>
                    </button>
                </div>
                <div class="p-4 pt-2 text-slate-600">
					Material Tailwind is an open-source library that uses the power of Tailwind CSS and React to help you build unique web projects faster and easier. The stunning design inspired by Material Design is a bonus! Get Material Tailwind and take advantage of its free components and features that will help you set up your web project quickly.
				</div>
                <div class="p-4 flex justify-end gap-2">
					<button popovertarget="dialogA" type="button" class="inline-flex items-center justify-center border align-middle select-none font-sans font-medium text-center transition-all duration-300 ease-in disabled:opacity-50 disabled:shadow-none disabled:cursor-not-allowed data-[shape=pill]:rounded-full data-[width=full]:w-full focus:shadow-none text-sm rounded-md py-2 px-4 bg-transparent border-transparent text-red-500 hover:bg-red-500/10 hover:border-red-500/10 shadow-none hover:shadow-none outline-none">Fermer</button>
                </div>
            </div>
		</dialog>
	</main>

	<script>
		const filters = document.querySelectorAll("#filters *");
  		const channels = document.querySelectorAll(".channel");
		let activeFilters: string[] = [];

		filters.forEach(btn => {
			btn.addEventListener("click", () => {
				const filter = btn.dataset.filter;

				if (activeFilters.includes(filter)) {
					activeFilters = activeFilters.filter(f => f !== filter);
					btn.classList.remove("active");
				} else {
					activeFilters.push(filter);
					btn.classList.add("active");
				}

				channels.forEach(channel => {
					const programs = channel.querySelectorAll(".program");
					let visibleCount = 0;

					programs.forEach(p => {
					const cats = p.dataset.categories.split(" ");
					const visible =
						activeFilters.length === 0 ||
						activeFilters.some(f => cats.includes(f));

					p.classList.toggle("hidden", !visible);
					if (visible) visibleCount++;
					});

					channel.classList.toggle("hidden", visibleCount === 0);
				});
			});
		});
	</script>
</Layout>
