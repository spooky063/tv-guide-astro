---
import type { Program as programProps } from '../tv/domain/Program';

interface Props {
  program: programProps[];
  count: number;
}

const { start, stop, title, subTitle, description, categories, image, rating, tvShow } = Astro.props.program[0];
const count = Astro.props.count;

function formatDateHours(date: Date): string {
    const d = date instanceof Date ? date : new Date(date);
    return `${String(d.getHours()).padStart(2, "0")}:${String(d.getMinutes()).padStart(2, "0")}`;
}

function timeOfProgram(startDate: Date, stopDate: Date): string {
    const start = startDate instanceof Date ? startDate : new Date(startDate);
    const stop = stopDate instanceof Date ? stopDate : new Date(stopDate);

    const diffInMinutes = Math.round((stop - start) / 60000);
    const hours = Math.floor(diffInMinutes / 60);
    const minutes = diffInMinutes % 60;

    if (hours === 0) {
        return `${minutes} min`;
    } else if (minutes === 0) {
        return `${hours}h`;
    } else {
        return `${hours}h${minutes.toString().padStart(2, "0")}`;
    }
}
---

<div class="flex mb-3 justify-between p-2">
    <div class="order-2">
        <img src={image} alt={title} class="w-[65px] h-[90px] object-cover rounded-md" />
    </div>
    <div class="order-1">
        <span class="text-sm font-bold">{formatDateHours(start)}</span>
        <h3 class="text-1xl font-bold">{title}</h3>
        {count > 1 ? <span class="text-sm">{count} Ã©pisodes</span> : null}
        {tvShow?.season && tvShow?.episode ?
            <span class="text-sm">S{tvShow?.season}E{tvShow?.episode}</span> : ''
        }
        {subTitle ? <p class="text-sm text-gray-600">{subTitle}</p> : null }
        <div class="text-sm">
            {categories?.map((category) => (
            <span class="bg-gray-100 text-gray-700 text-xs font-medium mr-2 px-1.5 py-1 rounded-full">{category}</span>
            ))}
        </div>
        <div class="text-sm">{timeOfProgram(start, stop)}</div>
    </div>
</div>